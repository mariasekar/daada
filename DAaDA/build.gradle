	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'

	group = 'os.daada'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		// Use jcenter for resolving your dependencies.
	    // You can declare any Maven/Ivy/file repository here.
	    jcenter()
		mavenCentral()
	}
	jar.baseName = "daada"

	version = 1.0

		dependencies {
		testCompile "junit:junit:4.12"
		compile "org.bouncycastle:bcprov-jdk15on:1.59"
		compile "org.apache.commons:commons-lang3:3.7"
		compile "commons-cli:commons-cli:1.4"
		compile "commons-codec:commons-codec:1.11"
		compile "com.typesafe:config:1.3.3"
        compile "com.googlecode.libphonenumber:prefixmapper:2.99"
		compile "com.googlecode.libphonenumber:geocoder:2.99"
		compile "com.googlecode.libphonenumber:carrier:1.89"
        compile "commons-validator:commons-validator:1.6"
		compile "org.jsoup:jsoup:1.11.2"
		compile "com.univocity:univocity-parsers:2.6.1"
		compile "net.openhft:chronicle-map:3.14.5"
		compile "com.esotericsoftware:kryo-shaded:4.0.1"
	}

	task runFinalJar(type: JavaExec) {
	   classpath = files('build/libs/gdbr_lib-1.0.jar')
	   classpath += sourceSets.main.runtimeClasspath
	   main = "org.adroit.andes.core.cli.ParallelDriver"
	}

	task testDependentKeyPairTest(type: Test) {
 		classpath = project.sourceSets.test.runtimeClasspath + files("${projectDir}/src/test/data")
 		exclude '**/*.*'
 		include 'os/daada/andes/core/util/security/**'
 		systemProperty "anonymization.security.keys.public", "publicfolder"
    	systemProperty "anonymization.security.keys.private", "privatefolder"
 	}

	test {
	    classpath = project.sourceSets.test.runtimeClasspath + files("${projectDir}/src/test/data")
	    exclude 'os/daada/andes/core/util/security/**' 
	}

	task fatJar (type: Jar, dependsOn: test) {

		baseName = jar.baseName

		sourceSets {
			main {
				resources {
					srcDirs += 'src/main/resources'
					srcDirs += 'src/test/data'
					exclude "**/*.java"
				}
			}
		}

		from {
			//exclude 'org/bouncycastle/', 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA','META-INF/*LICENSE*', 'META-INF/*LICENSE*.txt', 'META-INF/*NOTICE*'
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
			configurations.compile.collect { it.isDirectory()  ? it : zipTree(it)} 
		}

    	with jar

    	// Exclude the signature files from BouncyCastle jar to avoid a SecurityException
    	// when executing the fat jar
    	exclude 'org/bouncycastle/', 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA','META-INF/*LICENSE*', 'META-INF/*LICENSE*.txt', 'META-INF/*NOTICE*' 

		manifest {
			attributes (
				'Class-Path': configurations.compile.collect { it.getName().contains("bouncycastle") || it.getName().contains("bcprov-jdk15on") ? ('./' + it.getName()) : '' }.join(' '),
				//'Main-Class': 'org.adroit.andes.core.cli.Driver'
				'Main-Class': 'org.adroit.andes.core.cli.ParallelDriver'
			)
		}
		doLast {
      		println 'Core Fat jar built successfully.'
   		}
	}

	task signJar(dependsOn: fatJar){

		def keystoreFilePath = 'keystore_andes.jks'
		def keystoreFile = new File(keystoreFilePath)
  		def keystorepass = 'xoadmin'
  		def keyalias = 'Xo-Andes'

	    onlyIf { // Skip the task if our secret data isn't available
	        	keystoreFile.exists()
	    	}
		doLast {
			println "Signing jar file..."
	      	def signedir  = new File("$buildDir/libs/signed")
	      	if(!signedir.exists()) {
		   		signedir.mkdirs()
		    	println "Signed directories created successfully."
	      	}
	      	ant.signjar(
	        		destDir: "${signedir.absolutePath}",
	                jar: "$buildDir/libs/*.jar",
	                alias: keyalias,
	                storetype:"jks",
	                keystore:keystoreFilePath,
	                storepass:keystorepass,
	                verbose:true,
	                preservelastmodified:"true"
	      		);
      		println 'Core Fat jar signed successfully.'
   		}
  	}
 
	task copyToSigned(type: Copy, dependsOn: signJar) {

   		into("$buildDir/libs/signed") 
   		from configurations.runtime.filter { it.name.startsWith('bcprov-jdk15on-1.58') }
		from files('./').filter { it.name.startsWith('imsi_validation_codes.csv') }
	}